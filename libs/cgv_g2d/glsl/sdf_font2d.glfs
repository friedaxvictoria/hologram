#version 430

//***** begin interface of shape2d.glsl ***********************************
uniform vec4 fill_color;
uniform float border_radius = 0.0;
uniform float feather_origin = 0.5;

float get_feather_width();
vec2 get_shape_size();
vec4 get_active_color(vec4 color);
vec4 transform_world_to_window_space(vec2 p);
//***** end interface of shape2d.glsl ***********************************

//***** begin interface of fragment2d.glfs ***********************************
uniform layout(binding = 0) sampler2D tex;

void finish_sdf_fragment2d(in float signed_distance, in vec4 color);
void finish_sdf_fragment2d(in float signed_distance, in vec4 color, in vec2 texcoords);
void finish_fragment2d(in vec4 color);
void finish_fragment2d(in vec4 color, in vec2 texcoords);
//***** end interface of fragment2d.glfs ***********************************

uniform float src_size = 32.0;
uniform float pixel_range = 2.0;
uniform int clear_type_mode = 0;
uniform vec2 text_size;
uniform float font_size = 32.0;
uniform float true_sdf_mix_factor = 0.0;

in vec2 pix_coord;
in vec2 tex_coord;

float median(float r, float g, float b) {
	return max(min(r, g), min(max(r, g), b));
}

float screen_pixel_range() {
	float screen_size = font_size * text_size.y;
	return max((screen_size/src_size) * pixel_range, 1.0);
}

float compute_coverage(in vec2 uv) {

	vec4 mtsd = texture(tex, uv).rgba;
	float sd = median(mtsd.r, mtsd.g, mtsd.b) * mix(1.0, mtsd.a, true_sdf_mix_factor);
	
	if(sd <= 0.0)
		return 0.0;

	float fw = get_feather_width();
	float signed_distance = -(screen_pixel_range()*(sd-0.5) + 0.5);
	signed_distance -= border_radius;
	signed_distance -= feather_origin*fw;

	float inv_feather = 1.0/fw;
	return 1.0 - clamp((signed_distance + fw) * inv_feather, 0.0, 1.0);
}

void main() {
	
	if(clear_type_mode != 0) {
		vec2 pixel_offset = dFdx(tex_coord);
		vec2 subpixel_offset = pixel_offset / 3.0;

		float coverage_r = compute_coverage(tex_coord - vec2(subpixel_offset.x, 0.0));
		float coverage_g = compute_coverage(tex_coord);
		float coverage_b = compute_coverage(tex_coord + vec2(subpixel_offset.x, 0.0));

		finish_fragment2d(vec4(coverage_r, coverage_g, coverage_b, coverage_g));
	} else {
		vec4 mtsd = texture(tex, tex_coord).rgba;
		float sd = median(mtsd.r, mtsd.g, mtsd.b) * mix(1.0, mtsd.a, true_sdf_mix_factor);
	
		if(sd <= 0.0)
			discard;

		float signed_distance = -(screen_pixel_range()*(sd-0.5) + 0.5);
		signed_distance -= border_radius;
		signed_distance -= feather_origin*get_feather_width();

		finish_sdf_fragment2d(signed_distance, get_active_color(fill_color));
	}	
}
