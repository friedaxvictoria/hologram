#version 460 core

/***** begin interface of view.glsl ***********************************/
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
/***** end interface of view.glsl ***********************************/

uniform sampler2D color;
uniform sampler2D depth;

uniform mat3 p_2;
uniform mat3 p_1;
uniform mat4 inv_mvp_source;
uniform float w;
uniform float l;
uniform float r;

uniform vec3 eye_source;
uniform vec3 eye_target;

uniform float fac;

in vec4 position;
in vec2 texcoord;

out vec4 color_fs;
out float discard_fs;

void main()
{  	
	float pt_depth = textureLod(depth, texcoord, 0).r;

	vec4 pt_world_coord = inv_mvp_source * vec4(2*texcoord.s-1, 2*texcoord.s-1, 2*pt_depth-1, 1);

	float range_value = length(vec4(eye_source,1) - pt_world_coord);

	float disparity = length(p_1*vec3(texcoord, 1))/range_value;

	//original equation but potentially p_2 == p_1 --> cancel each other out
	//float target_x = disparity * w/(r-l) * (eye_source-eye_target).x * fac + texcoord.x;
	vec3 target = disparity * inverse(p_2) * (eye_source-eye_target) * fac + inverse(p_2) * p_1 * vec3(texcoord, 1);

	float depth = textureLod(depth, vec2(target.x, texcoord.y), 0).r;
	discard_fs = depth < 1 ? 0 : 1;

	color_fs = textureLod(color, vec2(target.x, texcoord.y), 0);
	//color_fs = vec4(range_value, range_value, range_value, 1);

	//vec4 position_transformed = get_modelview_projection_matrix() * position;
	//gl_Position = vec4(target.x, target.y, 2*depth-1, 1);
	//gl_Position = vec4(position_transformed.xy, 2*depth-1, position_transformed.w);
	gl_Position = vec4(2*texcoord.x-1, 2*texcoord.y-1, 2*depth-1, 1) + 0.000001*position;
	//gl_Position = position_transformed;
}
