#version 460 core

in vec2 texcoord;

uniform sampler2D color_tex;
uniform sampler2D depth_tex;

uniform mat4 p_source;

uniform vec4 eye_source;
uniform vec4 eye_target;

uniform float z_far;

uniform float shear;

out float discard_fs;
out vec4 color_fs;

void main()
{  	
	float pt_depth = textureLod(depth_tex, texcoord, 0).r;
	discard_fs = pt_depth < 1 ? 0 : 1;

	color_fs = textureLod(color_tex, texcoord, 0);

	vec4 pt_eye_coord = inverse(p_source) * vec4(2*texcoord.s-1, 2*texcoord.t-1, 2*pt_depth-1, 1);
	pt_eye_coord = vec4(pt_eye_coord.xyz/pt_eye_coord.w,1);

	vec4 target_to_point = eye_target - pt_eye_coord;
	vec4 intersection_z_far = eye_target - target_to_point * z_far / target_to_point.z;

	intersection_z_far.x = intersection_z_far.x - shear;

	vec4 intersection_pt_depth = eye_source + (eye_source-intersection_z_far) * pt_eye_coord.z / intersection_z_far.z;

	vec4 new_pos_clip = p_source * intersection_pt_depth;
	float x_value = new_pos_clip.x/new_pos_clip.w;
	//float new_pos_window = (0.5*(new_pos_ndc+1));

	/*vec4 target_to_point = eye_target - pt_eye_coord;
	vec4 intersection_2 = eye_target + target_to_point * point_on_plane.z / target_to_point.z;

	float l = -length(target_to_point);
	float eye_distance = (eye_target-eye_source).x;

	vec4 new_pos_clip_2 = p_source * vec4(pt_eye_coord.x, pt_eye_coord.y, l, pt_eye_coord.w);
	float new_pos_ndc_2 = new_pos_clip_2.x/new_pos_clip_2.w;
	float new_pos_window_2 = (0.5*(new_pos_ndc_2+1));*/

	//vec2 new_texcoord = vec2(new_pos_window, texcoord.t);

	//float new_depth = 2*textureLod(depth_tex, new_texcoord, 0).r-1;

	gl_Position = vec4(x_value, 2*texcoord.t-1, 2*pt_depth-1, 1);
}
