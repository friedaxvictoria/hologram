#version 460 core

layout (local_size_x = 1, local_size_y = 1) in;

layout(binding = 0, rgba32f) uniform writeonly image3D color_tex;

uniform int screen_w;
uniform int screen_h;
uniform int quilt_cols;

layout(std430, binding = 0) buffer storage_buffer
{
    int col_depth[];
};

void main()
{  	
	ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
	vec2 image_coord;
	image_coord.x = coord.x%screen_w;
    image_coord.y = coord.y%screen_h;

	int current_view = int(coord.x/float(screen_w)) + int(coord.y/float(screen_h))*quilt_cols;

	int index = coord.x+coord.y*(screen_w*quilt_cols);
	int color_int = col_depth[index];

	uint mask;
	mask = ((1 << 8) - 1) << 24;
	uint red = color_int & mask;
	red = red >> 24;

	mask = ((1 << 8) - 1) << 16;
	uint green = color_int & mask;
	green = green >> 16;

	mask = ((1 << 8) - 1) << 8;
	uint blue = color_int & mask;
	blue = blue >> 8;

	mask = ((1 << 8) - 1) << 0;
	uint alpha = color_int & mask;

	vec4 color = vec4(red/255.0,green/255.0,blue/255.0,alpha/255.0);

	if (alpha != 0)
		imageStore(color_tex, ivec3(image_coord,current_view), color);
}