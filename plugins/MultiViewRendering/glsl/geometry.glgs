#version 460 core

in VS_OUT {
     vec3 normal_eye_gs;
	 vec3 position_eye_gs;
	 vec4 color_gs;
	 vec2 texcoord_gs;
} gs_in[]; 

layout (triangles, invocations = 4) in;
layout (triangle_strip, max_vertices = 3) out;

uniform float eye_sep;			// distance between stereo eyes
uniform float eye;				// index of the first view position for this geometry shader call [-1,1]
uniform float view_offset;		// the difference in x-coordinates between two views in eye coordinates
uniform float zero_parallax;	// (positive) depth at zero parallax

out vec3 normal_eye;
out vec3 position_eye;
out vec4 color_fs;
out vec2 texcoord_fs;

//***** begin interface of view.glsl ***********************************
mat4 get_projection_matrix();
//***** end interface of view.glsl ***********************************

void main()
{
	// recalculate projection matrix based on current target view
	mat4 p = get_projection_matrix();
	p[2][0] = -eye_sep * (eye + gl_InvocationID * view_offset);
	p[3][0] = -zero_parallax * eye_sep * (eye + gl_InvocationID * view_offset);

	for (int i = 0; i<3; i++){
		// pass through values from vertex shader
		normal_eye = gs_in[i].normal_eye_gs;
		position_eye = gs_in[i].position_eye_gs;
		color_fs = gs_in[i].color_gs;
		texcoord_fs = gs_in[i].texcoord_gs;

		// calculate clip coordinates for vertex
		gl_Position = p * gl_in[i].gl_Position;

		// set layer for volume mode and viewport index for quilt mode
		gl_Layer = gl_InvocationID;
		gl_ViewportIndex = gl_InvocationID;

		EmitVertex();
	}
	EndPrimitive(); 
}