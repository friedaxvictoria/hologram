#version 330 core

in vec2 texcoord_fs;

uniform sampler2D color_tex;
uniform sampler2D depth_tex;

//uniform mat3 p_2;
//uniform mat3 p_1;
uniform mat4 mv_source;
uniform mat4 inv_p_source;
uniform float screen_width;

uniform vec3 eye_source;
uniform vec3 eye_target;

uniform vec3 plane_normal;
uniform vec3 point_on_plane;

uniform float w;

out vec4 color;


void main()
{
	/*float pt_depth = textureLod(depth, texcoord, 0).r;

	vec4 pt_world_coord = inv_mvp_source * vec4(2*texcoord.s-1, 2*texcoord.s-1, 2*pt_depth-1, 1);

	float range_value = length(vec4(eye_source,1) - pt_world_coord);

	float disparity = length(p_1*vec3(texcoord, 1))/range_value;

	//original equation but potentially p_2 == p_1 --> cancel each other out
	//float target_x = disparity * w/(r-l) * (eye_source-eye_target).x * fac + texcoord.x;
	vec3 target = disparity * inverse(p_2) * (eye_source-eye_target) + inverse(p_2) * p_1 * vec3(texcoord, 1);

	float depth = textureLod(depth, vec2(target.x, texcoord.y), 0).r;
	discard_fs = depth < 1 ? 0 : 1;

	color_fs = textureLod(color, vec2(target.x, texcoord.y), 0);
	//color_fs = vec4(range_value, range_value, range_value, 1);

	//vec4 position_transformed = get_modelview_projection_matrix() * position;
	//gl_Position = vec4(target.x, target.y, 2*depth-1, 1);
	//gl_Position = vec4(position_transformed.xy, 2*depth-1, position_transformed.w);
	gl_Position = vec4(2*texcoord.x-1, 2*texcoord.y-1, 2*depth-1, 1);
	//gl_Position = position_transformed;*/

	float pt_depth = textureLod(depth_tex, texcoord_fs, 0).r;

	vec4 pt_world_coord = inverse(mv_source) * inv_p_source * vec4(2*texcoord_fs.s-1, 2*texcoord_fs.t-1, 2*pt_depth-1, 1);
	vec3 pt_world_coord_clip = pt_world_coord.xyz/pt_world_coord.w;

	vec3 eye_to_point = eye_source - pt_world_coord_clip;
	float range_value = length(eye_to_point);

	float intersection_param = dot((point_on_plane-eye_source),plane_normal) / (dot(eye_to_point, plane_normal));
	vec3 intersection = eye_source + intersection_param * eye_to_point;

	float length_pt_plane = length(pt_world_coord_clip - intersection);

	float eye_distance = (eye_target-eye_source).x;

	float x_offset = eye_distance/range_value*length_pt_plane;
	vec4 new_pos_clip = inverse(inv_p_source) * mv_source * vec4(pt_world_coord_clip[0] + x_offset, pt_world_coord_clip[1], pt_world_coord_clip[2], 1);
	float new_pos_ndc = new_pos_clip.x/new_pos_clip.w;
	float new_pos_window = (0.5*(new_pos_ndc+1));

	vec2 new_texcoord = vec2(new_pos_window, texcoord_fs.t);

	float new_depth = textureLod(depth_tex, new_texcoord, 0).r;

	color = textureLod(color_tex, new_texcoord, 0);

	//float d = abs(x_offset_window)*abs(x_offset_window) * w;
	//color = vec4(d, d, d, 1);

	if (new_depth >= 1)
		discard;

	gl_FragDepth = 2*new_depth-1;
}