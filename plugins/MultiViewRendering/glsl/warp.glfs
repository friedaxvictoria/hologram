#version 330 core

in vec2 texcoord_fs;

uniform sampler2D color_tex;
uniform sampler2D depth_tex;

uniform mat4 p_source;

uniform vec4 eye_source;
uniform vec4 eye_target;

uniform vec4 plane_normal;
uniform vec4 point_on_plane;

uniform float w;

out vec4 color;


void main()
{
	float pt_depth = textureLod(depth_tex, texcoord_fs, 0).r;
	if (pt_depth >= 1.0)
		discard;

	vec4 pt_eye_coord = inverse(p_source) * vec4(2*texcoord_fs.s-1, 2*texcoord_fs.t-1, 2*pt_depth-1, 1);
	pt_eye_coord = vec4(pt_eye_coord.xyz/pt_eye_coord.w,1);

	/*vec4 source_to_point = eye_source - pt_eye_coord;
	float length_pt_source = length(source_to_point);

	vec4 intersection = eye_source + source_to_point * point_on_plane.z / source_to_point.z;

	float length_pt_plane = length(pt_eye_coord - intersection);

	float eye_distance = (eye_target-eye_source).x;

	float x_offset = -eye_distance/length_pt_source*length_pt_plane;

	vec4 new_pos_clip = p_source * vec4(intersection.x + x_offset, intersection.y, intersection.z, intersection.w);
	float new_pos_ndc = new_pos_clip.x/new_pos_clip.w;
	float new_pos_window = (0.5*(new_pos_ndc+1));*/

	vec4 target_to_point = eye_target - pt_eye_coord;
	//vec4 intersection_2 = eye_target + target_to_point * point_on_plane.z / target_to_point.z;

	float l = -length(target_to_point);

	vec4 new_pos_clip_2 = p_source * vec4(pt_eye_coord.x, pt_eye_coord.y, l, pt_eye_coord.w);
	float new_pos_ndc_2 = new_pos_clip_2.x/new_pos_clip_2.w;
	float new_pos_window_2 = (0.5*(new_pos_ndc_2+1));

	vec2 new_texcoord = vec2(new_pos_window_2, texcoord_fs.t);

	color = textureLod(color_tex, new_texcoord, 0);

	gl_FragDepth = 2*textureLod(depth_tex, new_texcoord, 0).r-1;
}