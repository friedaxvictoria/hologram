#version 460 core

/***** begin interface of view.glsl ***********************************/
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
/***** end interface of view.glsl ************************************/

uniform sampler2D color;
uniform sampler2D depth;

uniform mat4 inv_mvp_source;

in vec2 texcoord;

out vec4 color_fs;
out float discard_fs;
out vec3 direction_fs;
out vec4 pos_source_world;


void main()
{
	color_fs = textureLod(color, texcoord,0);

	float depth = textureLod(depth, texcoord, 0).r;
	discard_fs = depth < 1 ? 0 : 1; // make sure we see a non-zero value in the fragment shader whenever we have bad geometry

	// caluculate the projection direction based off of the pixel coordinates
	vec4 proj_one = inv_mvp_source * vec4(2*texcoord.s-1, 2*texcoord.t-1, 0, 1);
	vec4 proj_two = inv_mvp_source * vec4(2*texcoord.s-1, 2*texcoord.t-1, 1, 1);
	direction_fs = normalize((proj_one - proj_two).xyz);
	
	// reproject point to new view
	// modelview projection matrices are used to support translation in modelview matrix
	pos_source_world = inv_mvp_source*vec4(2*texcoord.s-1, 2*texcoord.t-1, 2*depth-1, 1);
	gl_Position = get_modelview_projection_matrix() * pos_source_world;
}
