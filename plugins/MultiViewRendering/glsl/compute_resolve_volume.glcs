#version 460 core

#define SPLAT 1

layout (local_size_x = 16, local_size_y = 16) in;

layout(binding = 0) uniform writeonly image3D color_tex;

uniform int screen_w;
uniform int screen_h;
uniform int quilt_cols;

layout(std430, binding = 0) buffer storage_buffer
{
    uint col_depth[];
};

void main()
{  	
	ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

	for (int c = 0; c<45; c++){
		// get current color
		int x_index = c%quilt_cols;
		int y_index = c/quilt_cols;
		int index = (coord.x+screen_w*x_index)+(coord.y+screen_h*y_index)*screen_w*quilt_cols;
		uint color_at_point = col_depth[index];

		// do point splatting if current point has wrong geometry --> use left and right point in x-offset and interpolate their values
		uint mask = ~(0xffffffff << 8);
		#if SPLAT == 1
			uint visible = (color_at_point & (1 << 24)) >> 24;
			if (visible == 0){
				int left = index-1; 
				int right = index+1;
				if (coord.x == 0)
					left=index;
				else if (coord.x == screen_w-1)
					right = index;
				uint color_int_left = col_depth[left];
				uint color_int_right = col_depth[right];

				//getting colors from storage buffer integer from: https://developer.download.nvidia.com/cg/bitfieldExtract.html
				float red = (((color_int_left >> 16) & mask) + ((color_int_right >> 16) & mask))/500.0;
				float green = (((color_int_left >> 8) & mask) + ((color_int_right >> 8) & mask))/500.0;
				float blue = ((color_int_left& mask) + (color_int_right & mask))/500.0;
				float alpha = (((color_int_left & (1 << 24)) >> 24) + ((color_int_right & (1 << 24)) >> 24))/2.0;

				if (alpha != 0)
					imageStore(color_tex, ivec3(coord,c), vec4(red, green, blue,1));
			}
			else{
				//getting colors from storage buffer integer from: https://developer.download.nvidia.com/cg/bitfieldExtract.html
				float red = ((color_at_point >> 16) & mask)/255.0;
				float green = ((color_at_point >> 8) & mask)/255.0;
				float blue = (color_at_point & mask)/255.0;

				imageStore(color_tex, ivec3(coord,c), vec4(red, green, blue,1));
			}
		#else
			//getting colors from storage buffer integer from: https://developer.download.nvidia.com/cg/bitfieldExtract.html
			float red = ((color_at_point >> 16) & mask)/255.0;
			float green = ((color_at_point >> 8) & mask)/255.0;
			float blue = (color_at_point & mask)/255.0;
			uint alpha = (color_at_point & (1 << 24)) >> 24;

			if (alpha != 0)
				imageStore(color_tex, ivec3(coord,c), vec4(red, green, blue,1));
		#endif
	}
}