#version 460 core

layout (local_size_x = 5, local_size_y = 9) in;

layout(binding = 0, rgba32f) uniform writeonly image2D color_tex;

uniform uint screen_w;
uniform uint quilt_cols;

layout(std430, binding = 0) buffer storage_buffer
{
    int col_depth[];
};

void main()
{  	
	ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

	// calculate index for looking up values in the storage buffer
	// no further calculations for the placement of the point has to be made because storage buffer is constructed like quilt
	uint index = coord.x+coord.y*(screen_w*quilt_cols);
	int color_at_point = col_depth[index];

	// do point splatting if current point has wrong geometry --> use left and right point in x-offset and interpolate their values
	if (color_at_point%255 == 0){
		uint left = index-1; 
		uint right = index+1;
		if (coord.x%screen_w == 0)
			left=index;
		else if (coord.x%screen_w == screen_w-1)
			right = index;
		int color_int_left = col_depth[left];
		int color_int_right = col_depth[right];

		//getting colors from storage buffer integer from: https://developer.download.nvidia.com/cg/bitfieldExtract.html
		uint mask = ~(0xffffffff << 8);
		float red = (((color_int_left >> 24) & mask) + ((color_int_right >> 24) & mask))/500.0;
		float green = (((color_int_left >> 16) & mask) + ((color_int_right >> 16) & mask))/500.0;
		float blue = (((color_int_left >> 8) & mask) + ((color_int_right >> 8) & mask))/500.0;
		float alpha = ((color_int_left & mask) + (color_int_right) & mask)/500.0;

		if (alpha != 0)
			imageStore(color_tex, coord, vec4(red,green,blue,alpha));
	}
	else{
		//getting colors from storage buffer integer from: https://developer.download.nvidia.com/cg/bitfieldExtract.html
		uint mask = ~(0xffffffff << 8);
		float red = ((color_at_point >> 24) & mask)/255.0;
		float green = ((color_at_point >> 16) & mask)/255.0;
		float blue = ((color_at_point >> 8) & mask)/255.0;
		
		imageStore(color_tex, coord, vec4(red,green,blue,1.0));
	}
}