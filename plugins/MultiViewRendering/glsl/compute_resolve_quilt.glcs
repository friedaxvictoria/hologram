#version 460 core

#define SPLAT 0

layout (local_size_x = 8, local_size_y = 64) in;

layout(binding = 0) uniform writeonly image2D color_tex;

uniform uint screen_w;
uniform uint quilt_cols;

uniform bool splat;

layout(std430, binding = 0) buffer storage_buffer
{
    int col_depth[];
};

void main()
{  	
	ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

	// calculate index for looking up values in the storage buffer
	// no further calculations for the placement of the point has to be made because storage buffer is constructed like quilt
	uint index = coord.x+coord.y*(screen_w*quilt_cols);
	int color_at_point = col_depth[index];

	// do point splatting if current point has wrong geometry --> use left and right point in x-offset and interpolate their values
		#if SPLAT == 1
		uint visible = (color_at_point & (1 << 24)) >> 24;
		if (visible == 0){
			uint left = index-1; 
			uint right = index+1;
			if (coord.x%screen_w == 0)
				left=index;
			else if (coord.x%screen_w == screen_w-1)
				right = index;
			uint color_int_left = col_depth[left];
			uint color_int_right = col_depth[right];

			//getting colors from storage buffer integer from: https://developer.download.nvidia.com/cg/bitfieldExtract.html
			uint mask = ~(0xffffffff << 8);
			float red = (((color_int_left >> 16) & mask) + ((color_int_right >> 16) & mask))/500.0;
			float green = (((color_int_left >> 8) & mask) + ((color_int_right >> 8) & mask))/500.0;
			float blue = ((color_int_left& mask) + (color_int_right & mask))/500.0;
			float alpha = ((color_int_left & (1 << 24)) >> 24 + (color_int_right & (1 << 24)) >> 24)/2.0;

			if (alpha != 0)
				imageStore(color_tex, ivec3(image_coord,current_view), vec4(red, green, blue,1));
		}
		else{
			//getting colors from storage buffer integer from: https://developer.download.nvidia.com/cg/bitfieldExtract.html
			uint mask = ~(0xffffffff << 8);
			float red = ((color_at_point >> 16) & mask)/255.0;
			float green = ((color_at_point >> 8) & mask)/255.0;
			float blue = (color_at_point & mask)/255.0;

			imageStore(color_tex, ivec3(image_coord,current_view), vec4(red, green, blue,1));
		}
	#else
		//getting colors from storage buffer integer from: https://developer.download.nvidia.com/cg/bitfieldExtract.html
		uint mask = ~(0xffffffff << 8);
		float red = ((color_at_point >> 16) & mask)/255.0;
		float green = ((color_at_point >> 8) & mask)/255.0;
		float blue = (color_at_point & mask)/255.0;
		uint alpha = (color_at_point & (1 << 24)) >> 24;

		if (alpha != 0)
			imageStore(color_tex, coord, vec4(red,green,blue,1.0));
	#endif
}